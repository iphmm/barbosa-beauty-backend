# Studio Barbosa Beauty - Back-end üíÖ

![Django](https://img.shields.io/badge/Django-092E20?style=for-the-badge&logo=django&logoColor=white)
![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white)

## üìÑ Sobre o Projeto

Este reposit√≥rio cont√©m o c√≥digo-fonte do back-end para o sistema de agendamento do **Studio Barbosa Beauty**. A aplica√ß√£o √© desenvolvida em Python com o framework Django e serve como uma API RESTful para gerenciar servi√ßos, clientes e agendamentos para o aplicativo do est√∫dio.

---

## ‚ú® Tecnologias Principais

- **Python:** Linguagem de programa√ß√£o principal.
- **Django:** Framework web para o desenvolvimento r√°pido e seguro.
- **Django REST Framework:** Toolkit para a constru√ß√£o de APIs Web.
- **SQLite3:** Banco de dados padr√£o para o ambiente de desenvolvimento.

---

## üöÄ Come√ßando

Siga os passos abaixo para configurar e rodar o projeto em sua m√°quina local.

### Pr√©-requisitos

Antes de come√ßar, garanta que voc√™ tenha os seguintes softwares instalados:

- **Python** (vers√£o 3.8 ou superior)
  - _**Importante (Windows):** Durante a instala√ß√£o, marque a caixa **"Add Python to PATH"**._
- **Git**

### Guia de Instala√ß√£o

1.  **Clone o reposit√≥rio**
    Abra seu terminal e clone o projeto em um diret√≥rio de sua prefer√™ncia.
    ```bash
    # Clone o reposit√≥rio
    git clone <URL_DO_SEU_REPOSITORIO_GIT>

    # Entre na pasta do projeto
    cd barbosa-beauty-backend
    ```

2.  **Crie e ative o ambiente virtual (`venv`)**
    Isso cria um ambiente isolado para as depend√™ncias do projeto, evitando conflitos.

    - **No Windows (CMD / PowerShell):**
      ```bash
      # Cria o ambiente virtual
      python -m venv venv

      # Ativa o ambiente
      venv\Scripts\activate
      ```

    - **No macOS / Linux:**
      ```bash
      # Cria o ambiente virtual
      python3 -m venv venv

      # Ativa o ambiente
      source venv/bin/activate
      ```
    Ap√≥s a ativa√ß√£o, voc√™ ver√° `(venv)` no in√≠cio da linha do seu terminal.

3.  **Instale as depend√™ncias**
    Com o ambiente virtual ativo, instale todas as bibliotecas necess√°rias listadas no arquivo `requirements.txt`.
    ```bash
    pip install -r requirements.txt
    ```
    > **Nota:** Se voc√™ for o primeiro a configurar o projeto, crie este arquivo com `pip freeze > requirements.txt` ap√≥s instalar o Django.

4.  **Execute as migra√ß√µes do banco de dados**
    Este comando cria as tabelas necess√°rias no banco de dados com base nos modelos definidos no c√≥digo.
    ```bash
    python manage.py migrate
    ```

5.  **Crie um superusu√°rio**
    Para acessar o painel de administra√ß√£o do Django, voc√™ precisa de um usu√°rio administrador.
    ```bash
    python manage.py createsuperuser
    ```
    Siga as instru√ß√µes para definir um nome de usu√°rio, e-mail e senha.

---

## ‚ñ∂Ô∏è Rodando a Aplica√ß√£o

Com tudo configurado, inicie o servidor de desenvolvimento.

```bash
python manage.py runserver
```

O servidor estar√° rodando em `http://127.0.0.1:8000/`.

- **API Principal:** [http://127.0.0.1:8000/](http://127.0.0.1:8000/)
- **Painel de Administra√ß√£o:** [http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/) (fa√ßa login com os dados do superusu√°rio).

---

## üîß Comandos √öteis

```bash
# Ativar o ambiente virtual (Windows)
venv\Scripts\activate

# Instalar/atualizar depend√™ncias
pip install -r requirements.txt

# Rodar migra√ß√µes do banco de dados
python manage.py migrate

# Iniciar o servidor de desenvolvimento
python manage.py runserver

# Criar um novo arquivo de requirements.txt
pip freeze > requirements.txt
```